{"version":3,"file":"index-dev.umd.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../src/timer.js","../src/domHelpers.js","../src/createGridComponent.js","../src/VariableSizeGrid.js","../src/createListComponent.js","../src/VariableSizeList.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nexport default memoizeOne;\n","// @flow\r\n\r\n// Animation frame based implementation of setTimeout.\r\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\r\n\r\nconst hasNativePerformanceNow =\r\n  typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nconst now = hasNativePerformanceNow\r\n  ? () => performance.now()\r\n  : () => Date.now();\r\n\r\nexport type TimeoutID = {|\r\n  id: AnimationFrameID,\r\n|};\r\n\r\nexport function cancelTimeout(timeoutID: TimeoutID) {\r\n  cancelAnimationFrame(timeoutID.id);\r\n}\r\n\r\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\r\n  const start = now();\r\n\r\n  function tick() {\r\n    if (now() - start >= delay) {\r\n      callback.call(null);\r\n    } else {\r\n      timeoutID.id = requestAnimationFrame(tick);\r\n    }\r\n  }\r\n\r\n  const timeoutID: TimeoutID = {\r\n    id: requestAnimationFrame(tick),\r\n  };\r\n\r\n  return timeoutID;\r\n}\r\n","// @flow\r\n\r\nlet size: number = -1;\r\n\r\n// This utility copied from \"dom-helpers\" package.\r\nexport function getScrollbarSize(recalculate?: boolean = false): number {\r\n  if (size === -1 || recalculate) {\r\n    const div = document.createElement('div');\r\n    const style = div.style;\r\n    style.width = '50px';\r\n    style.height = '50px';\r\n    style.overflow = 'scroll';\r\n\r\n    ((document.body: any): HTMLBodyElement).appendChild(div);\r\n\r\n    size = div.offsetWidth - div.clientWidth;\r\n\r\n    ((document.body: any): HTMLBodyElement).removeChild(div);\r\n  }\r\n\r\n  return size;\r\n}\r\n\r\nexport type RTLOffsetType =\r\n  | 'negative'\r\n  | 'positive-descending'\r\n  | 'positive-ascending';\r\n\r\nlet cachedRTLResult: RTLOffsetType | null = null;\r\n\r\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\r\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\r\n// The safest way to check this is to intentionally set a negative offset,\r\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\r\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\r\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\r\n  if (cachedRTLResult === null || recalculate) {\r\n    const outerDiv = document.createElement('div');\r\n    const outerStyle = outerDiv.style;\r\n    outerStyle.width = '50px';\r\n    outerStyle.height = '50px';\r\n    outerStyle.overflow = 'scroll';\r\n    outerStyle.direction = 'rtl';\r\n\r\n    const innerDiv = document.createElement('div');\r\n    const innerStyle = innerDiv.style;\r\n    innerStyle.width = '100px';\r\n    innerStyle.height = '100px';\r\n\r\n    outerDiv.appendChild(innerDiv);\r\n\r\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\r\n\r\n    if (outerDiv.scrollLeft > 0) {\r\n      cachedRTLResult = 'positive-descending';\r\n    } else {\r\n      outerDiv.scrollLeft = 1;\r\n      if (outerDiv.scrollLeft === 0) {\r\n        cachedRTLResult = 'negative';\r\n      } else {\r\n        cachedRTLResult = 'positive-ascending';\r\n      }\r\n    }\r\n\r\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\r\n\r\n    return cachedRTLResult;\r\n  }\r\n\r\n  return cachedRTLResult;\r\n}\r\n","// @flow\r\n\r\nimport memoizeOne from 'memoize-one';\r\nimport { createElement, PureComponent } from 'react';\r\nimport { cancelTimeout, requestTimeout } from './timer';\r\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\r\n\r\nimport type { TimeoutID } from './timer';\r\n\r\ntype Direction = 'ltr' | 'rtl';\r\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\r\n\r\ntype itemSize = number | ((index: number) => number);\r\n\r\ntype RenderComponentProps<T> = {|\r\n  columnIndex: number,\r\n  data: T,\r\n  isScrolling?: boolean,\r\n  rowIndex: number,\r\n  style: Object,\r\n|};\r\nexport type RenderComponent<T> = React$ComponentType<\r\n  $Shape<RenderComponentProps<T>>\r\n>;\r\n\r\ntype ScrollDirection = 'forward' | 'backward';\r\n\r\ntype OnItemsRenderedCallback = ({\r\n  overscanColumnStartIndex: number,\r\n  overscanColumnStopIndex: number,\r\n  overscanRowStartIndex: number,\r\n  overscanRowStopIndex: number,\r\n  visibleColumnStartIndex: number,\r\n  visibleColumnStopIndex: number,\r\n  visibleRowStartIndex: number,\r\n  visibleRowStopIndex: number,\r\n}) => void;\r\ntype OnScrollCallback = ({\r\n  horizontalScrollDirection: ScrollDirection,\r\n  scrollLeft: number,\r\n  scrollTop: number,\r\n  scrollUpdateWasRequested: boolean,\r\n  verticalScrollDirection: ScrollDirection,\r\n}) => void;\r\n\r\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\r\ntype ItemStyleCache = { [key: string]: Object };\r\n\r\ntype OuterProps = {|\r\n  children: React$Node,\r\n  className: string | void,\r\n  onScroll: ScrollEvent => void,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\ntype InnerProps = {|\r\n  children: React$Node,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\nexport type Props<T> = {|\r\n  children: RenderComponent<T>,\r\n  className?: string,\r\n  columnCount: number,\r\n  columnWidth: itemSize,\r\n  direction: Direction,\r\n  height: number,\r\n  initialScrollLeft?: number,\r\n  initialScrollTop?: number,\r\n  innerRef?: any,\r\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\r\n  innerTagName?: string, // deprecated\r\n  itemData: T,\r\n  itemKey?: (params: {|\r\n    columnIndex: number,\r\n    data: T,\r\n    rowIndex: number,\r\n  |}) => any,\r\n  onItemsRendered?: OnItemsRenderedCallback,\r\n  onScroll?: OnScrollCallback,\r\n  outerRef?: any,\r\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\r\n  outerTagName?: string, // deprecated\r\n  overscanColumnCount?: number,\r\n  overscanColumnsCount?: number, // deprecated\r\n  overscanCount?: number, // deprecated\r\n  overscanRowCount?: number,\r\n  overscanRowsCount?: number, // deprecated\r\n  rowCount: number,\r\n  rowHeight: itemSize,\r\n  style?: Object,\r\n  useIsScrolling: boolean,\r\n  width: number,\r\n|};\r\n\r\ntype State = {|\r\n  instance: any,\r\n  isScrolling: boolean,\r\n  horizontalScrollDirection: ScrollDirection,\r\n  scrollLeft: number,\r\n  scrollTop: number,\r\n  scrollUpdateWasRequested: boolean,\r\n  verticalScrollDirection: ScrollDirection,\r\n|};\r\n\r\ntype getItemOffset = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype getItemSize = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\r\ntype GetOffsetForItemAndAlignment = (\r\n  props: Props<any>,\r\n  index: number,\r\n  align: ScrollToAlign,\r\n  scrollOffset: number,\r\n  instanceProps: any,\r\n  scrollbarSize: number\r\n) => number;\r\ntype GetStartIndexForOffset = (\r\n  props: Props<any>,\r\n  offset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetStopIndexForStartIndex = (\r\n  props: Props<any>,\r\n  startIndex: number,\r\n  scrollOffset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\r\ntype ValidateProps = (props: Props<any>) => void;\r\n\r\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\r\n\r\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\r\n  `${rowIndex}:${columnIndex}`;\r\n\r\n// In DEV mode, this Set helps us only log a warning once per component instance.\r\n// This avoids spamming the console every time a render happens.\r\nlet devWarningsOverscanCount = null;\r\nlet devWarningsOverscanRowsColumnsCount = null;\r\nlet devWarningsTagName = null;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\r\n    devWarningsOverscanCount = new WeakSet();\r\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\r\n    devWarningsTagName = new WeakSet();\r\n  }\r\n}\r\n\r\nexport default function createGridComponent({\r\n  getColumnOffset,\r\n  getColumnStartIndexForOffset,\r\n  getColumnStopIndexForStartIndex,\r\n  getColumnWidth,\r\n  getEstimatedTotalHeight,\r\n  getEstimatedTotalWidth,\r\n  getOffsetForColumnAndAlignment,\r\n  getOffsetForRowAndAlignment,\r\n  getRowHeight,\r\n  getRowOffset,\r\n  getRowStartIndexForOffset,\r\n  getRowStopIndexForStartIndex,\r\n  initInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange,\r\n  validateProps,\r\n}: {|\r\n  getColumnOffset: getItemOffset,\r\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\r\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\r\n  getColumnWidth: getItemSize,\r\n  getEstimatedTotalHeight: getEstimatedTotalSize,\r\n  getEstimatedTotalWidth: getEstimatedTotalSize,\r\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\r\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\r\n  getRowOffset: getItemOffset,\r\n  getRowHeight: getItemSize,\r\n  getRowStartIndexForOffset: GetStartIndexForOffset,\r\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\r\n  initInstanceProps: InitInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange: boolean,\r\n  validateProps: ValidateProps,\r\n|}) {\r\n  return class Grid<T> extends PureComponent<Props<T>, State> {\r\n    _instanceProps: any = initInstanceProps(this.props, this);\r\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\r\n    _outerRef: ?HTMLDivElement;\r\n\r\n    static defaultProps = {\r\n      direction: 'ltr',\r\n      itemData: undefined,\r\n      useIsScrolling: false,\r\n    };\r\n\r\n    state: State = {\r\n      instance: this,\r\n      isScrolling: false,\r\n      horizontalScrollDirection: 'forward',\r\n      scrollLeft:\r\n        typeof this.props.initialScrollLeft === 'number'\r\n          ? this.props.initialScrollLeft\r\n          : 0,\r\n      scrollTop:\r\n        typeof this.props.initialScrollTop === 'number'\r\n          ? this.props.initialScrollTop\r\n          : 0,\r\n      scrollUpdateWasRequested: false,\r\n      verticalScrollDirection: 'forward',\r\n    };\r\n\r\n    // Always use explicit constructor for React components.\r\n    // It produces less code after transpilation. (#26)\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props: Props<T>) {\r\n      super(props);\r\n    }\r\n\r\n    static getDerivedStateFromProps(\r\n      nextProps: Props<T>,\r\n      prevState: State\r\n    ): $Shape<State> | null {\r\n      validateSharedProps(nextProps, prevState);\r\n      validateProps(nextProps);\r\n      return null;\r\n    }\r\n\r\n    scrollTo({\r\n      scrollLeft,\r\n      scrollTop,\r\n    }: {\r\n      scrollLeft: number,\r\n      scrollTop: number,\r\n    }): void {\r\n      if (scrollLeft !== undefined) {\r\n        scrollLeft = Math.max(0, scrollLeft);\r\n      }\r\n      if (scrollTop !== undefined) {\r\n        scrollTop = Math.max(0, scrollTop);\r\n      }\r\n\r\n      this.setState(prevState => {\r\n        if (scrollLeft === undefined) {\r\n          scrollLeft = prevState.scrollLeft;\r\n        }\r\n        if (scrollTop === undefined) {\r\n          scrollTop = prevState.scrollTop;\r\n        }\r\n\r\n        if (\r\n          prevState.scrollLeft === scrollLeft &&\r\n          prevState.scrollTop === scrollTop\r\n        ) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          horizontalScrollDirection:\r\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\r\n          scrollLeft: scrollLeft,\r\n          scrollTop: scrollTop,\r\n          scrollUpdateWasRequested: true,\r\n          verticalScrollDirection:\r\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    }\r\n\r\n    scrollToItem({\r\n      align = 'auto',\r\n      columnIndex,\r\n      rowIndex,\r\n    }: {\r\n      align: ScrollToAlign,\r\n      columnIndex?: number,\r\n      rowIndex?: number,\r\n    }): void {\r\n      const { columnCount, height, rowCount, width } = this.props;\r\n      const { scrollLeft, scrollTop } = this.state;\r\n      const scrollbarSize = getScrollbarSize();\r\n\r\n      if (columnIndex !== undefined) {\r\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\r\n      }\r\n      if (rowIndex !== undefined) {\r\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\r\n      }\r\n\r\n      const estimatedTotalHeight = getEstimatedTotalHeight(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n      const estimatedTotalWidth = getEstimatedTotalWidth(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n\r\n      // The scrollbar size should be considered when scrolling an item into view,\r\n      // to ensure it's fully visible.\r\n      // But we only need to account for its size when it's actually visible.\r\n      const horizontalScrollbarSize =\r\n        estimatedTotalWidth > width ? scrollbarSize : 0;\r\n      const verticalScrollbarSize =\r\n        estimatedTotalHeight > height ? scrollbarSize : 0;\r\n\r\n      this.scrollTo({\r\n        scrollLeft:\r\n          columnIndex !== undefined\r\n            ? getOffsetForColumnAndAlignment(\r\n                this.props,\r\n                columnIndex,\r\n                align,\r\n                scrollLeft,\r\n                this._instanceProps,\r\n                verticalScrollbarSize\r\n              )\r\n            : scrollLeft,\r\n        scrollTop:\r\n          rowIndex !== undefined\r\n            ? getOffsetForRowAndAlignment(\r\n                this.props,\r\n                rowIndex,\r\n                align,\r\n                scrollTop,\r\n                this._instanceProps,\r\n                horizontalScrollbarSize\r\n              )\r\n            : scrollTop,\r\n      });\r\n    }\r\n\r\n    componentDidMount() {\r\n      const { initialScrollLeft, initialScrollTop } = this.props;\r\n\r\n      if (this._outerRef != null) {\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n        if (typeof initialScrollLeft === 'number') {\r\n          outerRef.scrollLeft = initialScrollLeft;\r\n        }\r\n        if (typeof initialScrollTop === 'number') {\r\n          outerRef.scrollTop = initialScrollTop;\r\n        }\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const { direction } = this.props;\r\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\r\n\r\n      if (scrollUpdateWasRequested && this._outerRef != null) {\r\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n        if (direction === 'rtl') {\r\n          switch (getRTLOffsetType()) {\r\n            case 'negative':\r\n              outerRef.scrollLeft = -scrollLeft;\r\n              break;\r\n            case 'positive-ascending':\r\n              outerRef.scrollLeft = scrollLeft;\r\n              break;\r\n            default:\r\n              const { clientWidth, scrollWidth } = outerRef;\r\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\r\n              break;\r\n          }\r\n        } else {\r\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\r\n        }\r\n\r\n        outerRef.scrollTop = Math.max(0, scrollTop);\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        children,\r\n        className,\r\n        columnCount,\r\n        direction,\r\n        height,\r\n        innerRef,\r\n        innerElementType,\r\n        innerTagName,\r\n        itemData,\r\n        itemKey = defaultItemKey,\r\n        outerElementType,\r\n        outerTagName,\r\n        rowCount,\r\n        style,\r\n        useIsScrolling,\r\n        width,\r\n      } = this.props;\r\n      const { isScrolling } = this.state;\r\n\r\n      const [\r\n        columnStartIndex,\r\n        columnStopIndex,\r\n      ] = this._getHorizontalRangeToRender();\r\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\r\n\r\n      const items = [];\r\n      if (columnCount > 0 && rowCount) {\r\n        for (\r\n          let rowIndex = rowStartIndex;\r\n          rowIndex <= rowStopIndex;\r\n          rowIndex++\r\n        ) {\r\n          for (\r\n            let columnIndex = columnStartIndex;\r\n            columnIndex <= columnStopIndex;\r\n            columnIndex++\r\n          ) {\r\n            items.push(\r\n              createElement(children, {\r\n                columnIndex,\r\n                data: itemData,\r\n                isScrolling: useIsScrolling ? isScrolling : undefined,\r\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\r\n                rowIndex,\r\n                style: this._getItemStyle(rowIndex, columnIndex),\r\n              })\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // Read this value AFTER items have been created,\r\n      // So their actual sizes (if variable) are taken into consideration.\r\n      const estimatedTotalHeight = getEstimatedTotalHeight(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n      const estimatedTotalWidth = getEstimatedTotalWidth(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n\r\n      return createElement(\r\n        outerElementType || outerTagName || 'div',\r\n        {\r\n          className,\r\n          onScroll: this._onScroll,\r\n          ref: this._outerRefSetter,\r\n          style: {\r\n            position: 'relative',\r\n            height,\r\n            width,\r\n            overflow: 'auto',\r\n            WebkitOverflowScrolling: 'touch',\r\n            willChange: 'transform',\r\n            direction,\r\n            ...style,\r\n          },\r\n        },\r\n        createElement(innerElementType || innerTagName || 'div', {\r\n          children: items,\r\n          ref: innerRef,\r\n          style: {\r\n            height: estimatedTotalHeight,\r\n            pointerEvents: isScrolling ? 'none' : undefined,\r\n            width: estimatedTotalWidth,\r\n          },\r\n        })\r\n      );\r\n    }\r\n\r\n    _callOnItemsRendered: (\r\n      overscanColumnStartIndex: number,\r\n      overscanColumnStopIndex: number,\r\n      overscanRowStartIndex: number,\r\n      overscanRowStopIndex: number,\r\n      visibleColumnStartIndex: number,\r\n      visibleColumnStopIndex: number,\r\n      visibleRowStartIndex: number,\r\n      visibleRowStopIndex: number\r\n    ) => void;\r\n    _callOnItemsRendered = memoizeOne(\r\n      (\r\n        overscanColumnStartIndex: number,\r\n        overscanColumnStopIndex: number,\r\n        overscanRowStartIndex: number,\r\n        overscanRowStopIndex: number,\r\n        visibleColumnStartIndex: number,\r\n        visibleColumnStopIndex: number,\r\n        visibleRowStartIndex: number,\r\n        visibleRowStopIndex: number\r\n      ) =>\r\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\r\n          overscanColumnStartIndex,\r\n          overscanColumnStopIndex,\r\n          overscanRowStartIndex,\r\n          overscanRowStopIndex,\r\n          visibleColumnStartIndex,\r\n          visibleColumnStopIndex,\r\n          visibleRowStartIndex,\r\n          visibleRowStopIndex,\r\n        })\r\n    );\r\n\r\n    _callOnScroll: (\r\n      scrollLeft: number,\r\n      scrollTop: number,\r\n      horizontalScrollDirection: ScrollDirection,\r\n      verticalScrollDirection: ScrollDirection,\r\n      scrollUpdateWasRequested: boolean\r\n    ) => void;\r\n    _callOnScroll = memoizeOne(\r\n      (\r\n        scrollLeft: number,\r\n        scrollTop: number,\r\n        horizontalScrollDirection: ScrollDirection,\r\n        verticalScrollDirection: ScrollDirection,\r\n        scrollUpdateWasRequested: boolean\r\n      ) =>\r\n        ((this.props.onScroll: any): OnScrollCallback)({\r\n          horizontalScrollDirection,\r\n          scrollLeft,\r\n          scrollTop,\r\n          verticalScrollDirection,\r\n          scrollUpdateWasRequested,\r\n        })\r\n    );\r\n\r\n    _callPropsCallbacks() {\r\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\r\n\r\n      if (typeof onItemsRendered === 'function') {\r\n        if (columnCount > 0 && rowCount > 0) {\r\n          const [\r\n            overscanColumnStartIndex,\r\n            overscanColumnStopIndex,\r\n            visibleColumnStartIndex,\r\n            visibleColumnStopIndex,\r\n          ] = this._getHorizontalRangeToRender();\r\n          const [\r\n            overscanRowStartIndex,\r\n            overscanRowStopIndex,\r\n            visibleRowStartIndex,\r\n            visibleRowStopIndex,\r\n          ] = this._getVerticalRangeToRender();\r\n          this._callOnItemsRendered(\r\n            overscanColumnStartIndex,\r\n            overscanColumnStopIndex,\r\n            overscanRowStartIndex,\r\n            overscanRowStopIndex,\r\n            visibleColumnStartIndex,\r\n            visibleColumnStopIndex,\r\n            visibleRowStartIndex,\r\n            visibleRowStopIndex\r\n          );\r\n        }\r\n      }\r\n\r\n      if (typeof onScroll === 'function') {\r\n        const {\r\n          horizontalScrollDirection,\r\n          scrollLeft,\r\n          scrollTop,\r\n          scrollUpdateWasRequested,\r\n          verticalScrollDirection,\r\n        } = this.state;\r\n        this._callOnScroll(\r\n          scrollLeft,\r\n          scrollTop,\r\n          horizontalScrollDirection,\r\n          verticalScrollDirection,\r\n          scrollUpdateWasRequested\r\n        );\r\n      }\r\n    }\r\n\r\n    // Lazily create and cache item styles while scrolling,\r\n    // So that pure component sCU will prevent re-renders.\r\n    // We maintain this cache, and pass a style prop rather than index,\r\n    // So that List can clear cached styles and force item re-render if necessary.\r\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\r\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\r\n      const { columnWidth, direction, rowHeight } = this.props;\r\n\r\n      const itemStyleCache = this._getItemStyleCache(\r\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\r\n        shouldResetStyleCacheOnItemSizeChange && direction,\r\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\r\n      );\r\n\r\n      const key = `${rowIndex}:${columnIndex}`;\r\n\r\n      let style;\r\n      if (itemStyleCache.hasOwnProperty(key)) {\r\n        style = itemStyleCache[key];\r\n      } else {\r\n        const offset = getColumnOffset(\r\n          this.props,\r\n          columnIndex,\r\n          this._instanceProps\r\n        );\r\n        const isRtl = direction === 'rtl';\r\n        itemStyleCache[key] = style = {\r\n          position: 'absolute',\r\n          left: isRtl ? undefined : offset,\r\n          right: isRtl ? offset : undefined,\r\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\r\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\r\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\r\n        };\r\n      }\r\n\r\n      return style;\r\n    };\r\n\r\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\r\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\r\n\r\n    _getHorizontalRangeToRender(): [number, number, number, number] {\r\n      const {\r\n        columnCount,\r\n        overscanColumnCount,\r\n        overscanColumnsCount,\r\n        overscanCount,\r\n        rowCount,\r\n      } = this.props;\r\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\r\n\r\n      const overscanCountResolved: number =\r\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\r\n\r\n      if (columnCount === 0 || rowCount === 0) {\r\n        return [0, 0, 0, 0];\r\n      }\r\n\r\n      const startIndex = getColumnStartIndexForOffset(\r\n        this.props,\r\n        scrollLeft,\r\n        this._instanceProps\r\n      );\r\n      const stopIndex = getColumnStopIndexForStartIndex(\r\n        this.props,\r\n        startIndex,\r\n        scrollLeft,\r\n        this._instanceProps\r\n      );\r\n\r\n      // Overscan by one item in each direction so that tab/focus works.\r\n      // If there isn't at least one extra item, tab loops back around.\r\n      const overscanBackward =\r\n        !isScrolling || horizontalScrollDirection === 'backward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n      const overscanForward =\r\n        !isScrolling || horizontalScrollDirection === 'forward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n\r\n      return [\r\n        Math.max(0, startIndex - overscanBackward),\r\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\r\n        startIndex,\r\n        stopIndex,\r\n      ];\r\n    }\r\n\r\n    _getVerticalRangeToRender(): [number, number, number, number] {\r\n      const {\r\n        columnCount,\r\n        overscanCount,\r\n        overscanRowCount,\r\n        overscanRowsCount,\r\n        rowCount,\r\n      } = this.props;\r\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\r\n\r\n      const overscanCountResolved: number =\r\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\r\n\r\n      if (columnCount === 0 || rowCount === 0) {\r\n        return [0, 0, 0, 0];\r\n      }\r\n\r\n      const startIndex = getRowStartIndexForOffset(\r\n        this.props,\r\n        scrollTop,\r\n        this._instanceProps\r\n      );\r\n      const stopIndex = getRowStopIndexForStartIndex(\r\n        this.props,\r\n        startIndex,\r\n        scrollTop,\r\n        this._instanceProps\r\n      );\r\n\r\n      // Overscan by one item in each direction so that tab/focus works.\r\n      // If there isn't at least one extra item, tab loops back around.\r\n      const overscanBackward =\r\n        !isScrolling || verticalScrollDirection === 'backward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n      const overscanForward =\r\n        !isScrolling || verticalScrollDirection === 'forward'\r\n          ? Math.max(1, overscanCountResolved)\r\n          : 1;\r\n\r\n      return [\r\n        Math.max(0, startIndex - overscanBackward),\r\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\r\n        startIndex,\r\n        stopIndex,\r\n      ];\r\n    }\r\n\r\n    _onScroll = (event: ScrollEvent): void => {\r\n      const {\r\n        clientHeight,\r\n        clientWidth,\r\n        scrollLeft,\r\n        scrollTop,\r\n        scrollHeight,\r\n        scrollWidth,\r\n      } = event.currentTarget;\r\n      this.setState(prevState => {\r\n        if (\r\n          prevState.scrollLeft === scrollLeft &&\r\n          prevState.scrollTop === scrollTop\r\n        ) {\r\n          // Scroll position may have been updated by cDM/cDU,\r\n          // In which case we don't need to trigger another render,\r\n          // And we don't want to update state.isScrolling.\r\n          return null;\r\n        }\r\n\r\n        const { direction } = this.props;\r\n\r\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\r\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\r\n        let calculatedScrollLeft = scrollLeft;\r\n        if (direction === 'rtl') {\r\n          switch (getRTLOffsetType()) {\r\n            case 'negative':\r\n              calculatedScrollLeft = -scrollLeft;\r\n              break;\r\n            case 'positive-descending':\r\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\r\n              break;\r\n          }\r\n        }\r\n\r\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\r\n        calculatedScrollLeft = Math.max(\r\n          0,\r\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\r\n        );\r\n        const calculatedScrollTop = Math.max(\r\n          0,\r\n          Math.min(scrollTop, scrollHeight - clientHeight)\r\n        );\r\n\r\n        return {\r\n          isScrolling: true,\r\n          horizontalScrollDirection:\r\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\r\n          scrollLeft: calculatedScrollLeft,\r\n          scrollTop: calculatedScrollTop,\r\n          verticalScrollDirection:\r\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\r\n          scrollUpdateWasRequested: false,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    };\r\n\r\n    _outerRefSetter = (ref: any): void => {\r\n      const { outerRef } = this.props;\r\n\r\n      this._outerRef = ((ref: any): HTMLDivElement);\r\n\r\n      if (typeof outerRef === 'function') {\r\n        outerRef(ref);\r\n      } else if (\r\n        outerRef != null &&\r\n        typeof outerRef === 'object' &&\r\n        outerRef.hasOwnProperty('current')\r\n      ) {\r\n        outerRef.current = ref;\r\n      }\r\n    };\r\n\r\n    _resetIsScrollingDebounced = () => {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n\r\n      this._resetIsScrollingTimeoutId = requestTimeout(\r\n        this._resetIsScrolling,\r\n        IS_SCROLLING_DEBOUNCE_INTERVAL\r\n      );\r\n    };\r\n\r\n    _resetIsScrolling = () => {\r\n      this._resetIsScrollingTimeoutId = null;\r\n\r\n      this.setState({ isScrolling: false }, () => {\r\n        // Clear style cache after state update has been committed.\r\n        // This way we don't break pure sCU for items that don't use isScrolling param.\r\n        this._getItemStyleCache(-1);\r\n      });\r\n    };\r\n  };\r\n}\r\n\r\nconst validateSharedProps = (\r\n  {\r\n    children,\r\n    direction,\r\n    height,\r\n    innerTagName,\r\n    outerTagName,\r\n    overscanColumnsCount,\r\n    overscanCount,\r\n    overscanRowsCount,\r\n    width,\r\n  }: Props<any>,\r\n  { instance }: State\r\n): void => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (typeof overscanCount === 'number') {\r\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\r\n        devWarningsOverscanCount.add(instance);\r\n        console.warn(\r\n          'The overscanCount prop has been deprecated. ' +\r\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (\r\n      typeof overscanColumnsCount === 'number' ||\r\n      typeof overscanRowsCount === 'number'\r\n    ) {\r\n      if (\r\n        devWarningsOverscanRowsColumnsCount &&\r\n        !devWarningsOverscanRowsColumnsCount.has(instance)\r\n      ) {\r\n        devWarningsOverscanRowsColumnsCount.add(instance);\r\n        console.warn(\r\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\r\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (innerTagName != null || outerTagName != null) {\r\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\r\n        devWarningsTagName.add(instance);\r\n        console.warn(\r\n          'The innerTagName and outerTagName props have been deprecated. ' +\r\n            'Please use the innerElementType and outerElementType props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (children == null) {\r\n      throw Error(\r\n        'An invalid \"children\" prop has been specified. ' +\r\n          'Value should be a React component. ' +\r\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\r\n      );\r\n    }\r\n\r\n    switch (direction) {\r\n      case 'ltr':\r\n      case 'rtl':\r\n        // Valid values\r\n        break;\r\n      default:\r\n        throw Error(\r\n          'An invalid \"direction\" prop has been specified. ' +\r\n            'Value should be either \"ltr\" or \"rtl\". ' +\r\n            `\"${direction}\" was specified.`\r\n        );\r\n    }\r\n\r\n    if (typeof width !== 'number') {\r\n      throw Error(\r\n        'An invalid \"width\" prop has been specified. ' +\r\n          'Grids must specify a number for width. ' +\r\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\r\n      );\r\n    }\r\n\r\n    if (typeof height !== 'number') {\r\n      throw Error(\r\n        'An invalid \"height\" prop has been specified. ' +\r\n          'Grids must specify a number for height. ' +\r\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\r\n      );\r\n    }\r\n  }\r\n};\r\n","// @flow\r\n\r\nimport createGridComponent from './createGridComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createGridComponent';\r\n\r\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\r\n\r\ntype VariableSizeProps = {|\r\n  estimatedColumnWidth: number,\r\n  estimatedRowHeight: number,\r\n  ...Props<any>,\r\n|};\r\n\r\ntype itemSizeGetter = (index: number) => number;\r\ntype ItemType = 'column' | 'row';\r\n\r\ntype ItemMetadata = {|\r\n  offset: number,\r\n  size: number,\r\n|};\r\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\r\ntype InstanceProps = {|\r\n  columnMetadataMap: ItemMetadataMap,\r\n  estimatedColumnWidth: number,\r\n  estimatedRowHeight: number,\r\n  lastMeasuredColumnIndex: number,\r\n  lastMeasuredRowIndex: number,\r\n  rowMetadataMap: ItemMetadataMap,\r\n|};\r\n\r\nconst getEstimatedTotalHeight = (\r\n  { rowCount }: Props<any>,\r\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\r\n) => {\r\n  let totalSizeOfMeasuredRows = 0;\r\n\r\n  // Edge case check for when the number of items decreases while a scroll is in progress.\r\n  // https://github.com/bvaughn/react-window/pull/138\r\n  if (lastMeasuredRowIndex >= rowCount) {\r\n    lastMeasuredRowIndex = rowCount - 1;\r\n  }\r\n\r\n  if (lastMeasuredRowIndex >= 0) {\r\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\r\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\r\n  }\r\n\r\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\r\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\r\n\r\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\r\n};\r\n\r\nconst getEstimatedTotalWidth = (\r\n  { columnCount }: Props<any>,\r\n  {\r\n    columnMetadataMap,\r\n    estimatedColumnWidth,\r\n    lastMeasuredColumnIndex,\r\n  }: InstanceProps\r\n) => {\r\n  let totalSizeOfMeasuredRows = 0;\r\n\r\n  // Edge case check for when the number of items decreases while a scroll is in progress.\r\n  // https://github.com/bvaughn/react-window/pull/138\r\n  if (lastMeasuredColumnIndex >= columnCount) {\r\n    lastMeasuredColumnIndex = columnCount - 1;\r\n  }\r\n\r\n  if (lastMeasuredColumnIndex >= 0) {\r\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\r\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\r\n  }\r\n\r\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\r\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\r\n\r\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\r\n};\r\n\r\nconst getItemMetadata = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: InstanceProps\r\n): ItemMetadata => {\r\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\r\n  if (itemType === 'column') {\r\n    itemMetadataMap = instanceProps.columnMetadataMap;\r\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\r\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\r\n  } else {\r\n    itemMetadataMap = instanceProps.rowMetadataMap;\r\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\r\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\r\n  }\r\n\r\n  if (index > lastMeasuredIndex) {\r\n    let offset = 0;\r\n    if (lastMeasuredIndex >= 0) {\r\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\r\n      offset = itemMetadata.offset + itemMetadata.size;\r\n    }\r\n\r\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\r\n      let size = itemSize(i);\r\n\r\n      itemMetadataMap[i] = {\r\n        offset,\r\n        size,\r\n      };\r\n\r\n      offset += size;\r\n    }\r\n\r\n    if (itemType === 'column') {\r\n      instanceProps.lastMeasuredColumnIndex = index;\r\n    } else {\r\n      instanceProps.lastMeasuredRowIndex = index;\r\n    }\r\n  }\r\n\r\n  return itemMetadataMap[index];\r\n};\r\n\r\nconst findNearestItem = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  offset: number\r\n) => {\r\n  let itemMetadataMap, lastMeasuredIndex;\r\n  if (itemType === 'column') {\r\n    itemMetadataMap = instanceProps.columnMetadataMap;\r\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\r\n  } else {\r\n    itemMetadataMap = instanceProps.rowMetadataMap;\r\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\r\n  }\r\n\r\n  const lastMeasuredItemOffset =\r\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\r\n\r\n  if (lastMeasuredItemOffset >= offset) {\r\n    // If we've already measured items within this range just use a binary search as it's faster.\r\n    return findNearestItemBinarySearch(\r\n      itemType,\r\n      props,\r\n      instanceProps,\r\n      lastMeasuredIndex,\r\n      0,\r\n      offset\r\n    );\r\n  } else {\r\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\r\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\r\n    // The overall complexity for this approach is O(log n).\r\n    return findNearestItemExponentialSearch(\r\n      itemType,\r\n      props,\r\n      instanceProps,\r\n      Math.max(0, lastMeasuredIndex),\r\n      offset\r\n    );\r\n  }\r\n};\r\n\r\nconst findNearestItemBinarySearch = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  high: number,\r\n  low: number,\r\n  offset: number\r\n): number => {\r\n  while (low <= high) {\r\n    const middle = low + Math.floor((high - low) / 2);\r\n    const currentOffset = getItemMetadata(\r\n      itemType,\r\n      props,\r\n      middle,\r\n      instanceProps\r\n    ).offset;\r\n\r\n    if (currentOffset === offset) {\r\n      return middle;\r\n    } else if (currentOffset < offset) {\r\n      low = middle + 1;\r\n    } else if (currentOffset > offset) {\r\n      high = middle - 1;\r\n    }\r\n  }\r\n\r\n  if (low > 0) {\r\n    return low - 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst findNearestItemExponentialSearch = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  index: number,\r\n  offset: number\r\n): number => {\r\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\r\n  let interval = 1;\r\n\r\n  while (\r\n    index < itemCount &&\r\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\r\n  ) {\r\n    index += interval;\r\n    interval *= 2;\r\n  }\r\n\r\n  return findNearestItemBinarySearch(\r\n    itemType,\r\n    props,\r\n    instanceProps,\r\n    Math.min(index, itemCount - 1),\r\n    Math.floor(index / 2),\r\n    offset\r\n  );\r\n};\r\n\r\nconst getOffsetForIndexAndAlignment = (\r\n  itemType: ItemType,\r\n  props: Props<any>,\r\n  index: number,\r\n  align: ScrollToAlign,\r\n  scrollOffset: number,\r\n  instanceProps: InstanceProps,\r\n  scrollbarSize: number\r\n): number => {\r\n  const size = itemType === 'column' ? props.width : props.height;\r\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\r\n\r\n  // Get estimated total size after ItemMetadata is computed,\r\n  // To ensure it reflects actual measurements instead of just estimates.\r\n  const estimatedTotalSize =\r\n    itemType === 'column'\r\n      ? getEstimatedTotalWidth(props, instanceProps)\r\n      : getEstimatedTotalHeight(props, instanceProps);\r\n\r\n  const maxOffset = Math.max(\r\n    0,\r\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\r\n  );\r\n  const minOffset = Math.max(\r\n    0,\r\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\r\n  );\r\n\r\n  if (align === 'smart') {\r\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\r\n      align = 'auto';\r\n    } else {\r\n      align = 'center';\r\n    }\r\n  }\r\n\r\n  switch (align) {\r\n    case 'start':\r\n      return maxOffset;\r\n    case 'end':\r\n      return minOffset;\r\n    case 'center':\r\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\r\n    case 'auto':\r\n    default:\r\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\r\n        return scrollOffset;\r\n      } else if (minOffset > maxOffset) {\r\n        // Because we only take into account the scrollbar size when calculating minOffset\r\n        // this value can be larger than maxOffset when at the end of the list\r\n        return minOffset;\r\n      } else if (scrollOffset < minOffset) {\r\n        return minOffset;\r\n      } else {\r\n        return maxOffset;\r\n      }\r\n  }\r\n};\r\n\r\nconst VariableSizeGrid = createGridComponent({\r\n  getColumnOffset: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\r\n\r\n  getColumnStartIndexForOffset: (\r\n    props: Props<any>,\r\n    scrollLeft: number,\r\n    instanceProps: InstanceProps\r\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\r\n\r\n  getColumnStopIndexForStartIndex: (\r\n    props: Props<any>,\r\n    startIndex: number,\r\n    scrollLeft: number,\r\n    instanceProps: InstanceProps\r\n  ): number => {\r\n    const { columnCount, width } = props;\r\n\r\n    const itemMetadata = getItemMetadata(\r\n      'column',\r\n      props,\r\n      startIndex,\r\n      instanceProps\r\n    );\r\n    const maxOffset = scrollLeft + width;\r\n\r\n    let offset = itemMetadata.offset + itemMetadata.size;\r\n    let stopIndex = startIndex;\r\n\r\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\r\n      stopIndex++;\r\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\r\n    }\r\n\r\n    return stopIndex;\r\n  },\r\n\r\n  getColumnWidth: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => instanceProps.columnMetadataMap[index].size,\r\n\r\n  getEstimatedTotalHeight,\r\n  getEstimatedTotalWidth,\r\n\r\n  getOffsetForColumnAndAlignment: (\r\n    props: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps,\r\n    scrollbarSize: number\r\n  ): number =>\r\n    getOffsetForIndexAndAlignment(\r\n      'column',\r\n      props,\r\n      index,\r\n      align,\r\n      scrollOffset,\r\n      instanceProps,\r\n      scrollbarSize\r\n    ),\r\n\r\n  getOffsetForRowAndAlignment: (\r\n    props: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps,\r\n    scrollbarSize: number\r\n  ): number =>\r\n    getOffsetForIndexAndAlignment(\r\n      'row',\r\n      props,\r\n      index,\r\n      align,\r\n      scrollOffset,\r\n      instanceProps,\r\n      scrollbarSize\r\n    ),\r\n\r\n  getRowOffset: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\r\n\r\n  getRowHeight: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => instanceProps.rowMetadataMap[index].size,\r\n\r\n  getRowStartIndexForOffset: (\r\n    props: Props<any>,\r\n    scrollTop: number,\r\n    instanceProps: InstanceProps\r\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\r\n\r\n  getRowStopIndexForStartIndex: (\r\n    props: Props<any>,\r\n    startIndex: number,\r\n    scrollTop: number,\r\n    instanceProps: InstanceProps\r\n  ): number => {\r\n    const { rowCount, height } = props;\r\n\r\n    const itemMetadata = getItemMetadata(\r\n      'row',\r\n      props,\r\n      startIndex,\r\n      instanceProps\r\n    );\r\n    const maxOffset = scrollTop + height;\r\n\r\n    let offset = itemMetadata.offset + itemMetadata.size;\r\n    let stopIndex = startIndex;\r\n\r\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\r\n      stopIndex++;\r\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\r\n    }\r\n\r\n    return stopIndex;\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\r\n    const {\r\n      estimatedColumnWidth,\r\n      estimatedRowHeight,\r\n    } = ((props: any): VariableSizeProps);\r\n\r\n    const instanceProps = {\r\n      columnMetadataMap: {},\r\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\r\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\r\n      lastMeasuredColumnIndex: -1,\r\n      lastMeasuredRowIndex: -1,\r\n      rowMetadataMap: {},\r\n    };\r\n\r\n    instance.resetAfterColumnIndex = (\r\n      columnIndex: number,\r\n      shouldForceUpdate?: boolean = true\r\n    ) => {\r\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\r\n    };\r\n\r\n    instance.resetAfterRowIndex = (\r\n      rowIndex: number,\r\n      shouldForceUpdate?: boolean = true\r\n    ) => {\r\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\r\n    };\r\n\r\n    instance.resetAfterIndices = ({\r\n      columnIndex,\r\n      rowIndex,\r\n      shouldForceUpdate = true,\r\n    }: {\r\n      columnIndex?: number,\r\n      rowIndex?: number,\r\n      shouldForceUpdate: boolean,\r\n    }) => {\r\n      if (typeof columnIndex === 'number') {\r\n        instanceProps.lastMeasuredColumnIndex = Math.min(\r\n          instanceProps.lastMeasuredColumnIndex,\r\n          columnIndex - 1\r\n        );\r\n      }\r\n      if (typeof rowIndex === 'number') {\r\n        instanceProps.lastMeasuredRowIndex = Math.min(\r\n          instanceProps.lastMeasuredRowIndex,\r\n          rowIndex - 1\r\n        );\r\n      }\r\n\r\n      // We could potentially optimize further by only evicting styles after this index,\r\n      // But since styles are only cached while scrolling is in progress-\r\n      // It seems an unnecessary optimization.\r\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\r\n      instance._getItemStyleCache(-1);\r\n\r\n      if (shouldForceUpdate) {\r\n        instance.forceUpdate();\r\n      }\r\n    };\r\n\r\n    return instanceProps;\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: false,\r\n\r\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof columnWidth !== 'function') {\r\n        throw Error(\r\n          'An invalid \"columnWidth\" prop has been specified. ' +\r\n            'Value should be a function. ' +\r\n            `\"${\r\n              columnWidth === null ? 'null' : typeof columnWidth\r\n            }\" was specified.`\r\n        );\r\n      } else if (typeof rowHeight !== 'function') {\r\n        throw Error(\r\n          'An invalid \"rowHeight\" prop has been specified. ' +\r\n            'Value should be a function. ' +\r\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default VariableSizeGrid;\r\n","// @flow\r\n\r\nimport memoizeOne from 'memoize-one';\r\nimport { createElement, PureComponent } from 'react';\r\nimport { cancelTimeout, requestTimeout } from './timer';\r\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\r\n\r\nimport type { TimeoutID } from './timer';\r\n\r\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\r\n\r\ntype itemSize = number | ((index: number) => number);\r\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\r\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\r\ntype Layout = 'horizontal' | 'vertical';\r\n\r\ntype RenderComponentProps<T> = {|\r\n  data: T,\r\n  index: number,\r\n  isScrolling?: boolean,\r\n  style: Object,\r\n|};\r\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\r\n\r\ntype ScrollDirection = 'forward' | 'backward';\r\n\r\ntype onItemsRenderedCallback = ({\r\n  overscanStartIndex: number,\r\n  overscanStopIndex: number,\r\n  visibleStartIndex: number,\r\n  visibleStopIndex: number,\r\n}) => void;\r\ntype onScrollCallback = ({\r\n  scrollDirection: ScrollDirection,\r\n  scrollOffset: number,\r\n  scrollUpdateWasRequested: boolean,\r\n}) => void;\r\n\r\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\r\ntype ItemStyleCache = { [index: number]: Object };\r\n\r\ntype OuterProps = {|\r\n  children: React$Node,\r\n  className: string | void,\r\n  onScroll: ScrollEvent => void,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\ntype InnerProps = {|\r\n  children: React$Node,\r\n  style: {\r\n    [string]: mixed,\r\n  },\r\n|};\r\n\r\nexport type Props<T> = {|\r\n  children: RenderComponent<T>,\r\n  className?: string,\r\n  direction: Direction,\r\n  height: number | string,\r\n  initialScrollOffset?: number,\r\n  innerRef?: any,\r\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\r\n  innerTagName?: string, // deprecated\r\n  itemCount: number,\r\n  itemData: T,\r\n  itemKey?: (index: number, data: T) => any,\r\n  itemSize: itemSize,\r\n  layout: Layout,\r\n  onItemsRendered?: onItemsRenderedCallback,\r\n  onScroll?: onScrollCallback,\r\n  outerRef?: any,\r\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\r\n  outerTagName?: string, // deprecated\r\n  overscanCount: number,\r\n  style?: Object,\r\n  useIsScrolling: boolean,\r\n  width: number | string,\r\n|};\r\n\r\ntype State = {|\r\n  instance: any,\r\n  isScrolling: boolean,\r\n  scrollDirection: ScrollDirection,\r\n  scrollOffset: number,\r\n  scrollUpdateWasRequested: boolean,\r\n|};\r\n\r\ntype GetItemOffset = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetItemSize = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\r\ntype GetOffsetForIndexAndAlignment = (\r\n  props: Props<any>,\r\n  index: number,\r\n  align: ScrollToAlign,\r\n  scrollOffset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetStartIndexForOffset = (\r\n  props: Props<any>,\r\n  offset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype GetStopIndexForStartIndex = (\r\n  props: Props<any>,\r\n  startIndex: number,\r\n  scrollOffset: number,\r\n  instanceProps: any\r\n) => number;\r\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\r\ntype ValidateProps = (props: Props<any>) => void;\r\n\r\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\r\n\r\nconst defaultItemKey = (index: number, data: any) => index;\r\n\r\n// In DEV mode, this Set helps us only log a warning once per component instance.\r\n// This avoids spamming the console every time a render happens.\r\nlet devWarningsDirection = null;\r\nlet devWarningsTagName = null;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\r\n    devWarningsDirection = new WeakSet();\r\n    devWarningsTagName = new WeakSet();\r\n  }\r\n}\r\n\r\nexport default function createListComponent({\r\n  getItemOffset,\r\n  getEstimatedTotalSize,\r\n  getItemSize,\r\n  getOffsetForIndexAndAlignment,\r\n  getStartIndexForOffset,\r\n  getStopIndexForStartIndex,\r\n  initInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange,\r\n  validateProps,\r\n}: {|\r\n  getItemOffset: GetItemOffset,\r\n  getEstimatedTotalSize: GetEstimatedTotalSize,\r\n  getItemSize: GetItemSize,\r\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\r\n  getStartIndexForOffset: GetStartIndexForOffset,\r\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\r\n  initInstanceProps: InitInstanceProps,\r\n  shouldResetStyleCacheOnItemSizeChange: boolean,\r\n  validateProps: ValidateProps,\r\n|}) {\r\n  return class List<T> extends PureComponent<Props<T>, State> {\r\n    _instanceProps: any = initInstanceProps(this.props, this);\r\n    _outerRef: ?HTMLDivElement;\r\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\r\n\r\n    static defaultProps = {\r\n      direction: 'ltr',\r\n      itemData: undefined,\r\n      layout: 'vertical',\r\n      overscanCount: 2,\r\n      useIsScrolling: false,\r\n    };\r\n\r\n    state: State = {\r\n      instance: this,\r\n      isScrolling: false,\r\n      scrollDirection: 'forward',\r\n      scrollOffset:\r\n        typeof this.props.initialScrollOffset === 'number'\r\n          ? this.props.initialScrollOffset\r\n          : 0,\r\n      scrollUpdateWasRequested: false,\r\n    };\r\n\r\n    // Always use explicit constructor for React components.\r\n    // It produces less code after transpilation. (#26)\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props: Props<T>) {\r\n      super(props);\r\n    }\r\n\r\n    static getDerivedStateFromProps(\r\n      nextProps: Props<T>,\r\n      prevState: State\r\n    ): $Shape<State> | null {\r\n      validateSharedProps(nextProps, prevState);\r\n      validateProps(nextProps);\r\n      return null;\r\n    }\r\n\r\n    scrollTo(scrollOffset: number): void {\r\n      scrollOffset = Math.max(0, scrollOffset);\r\n\r\n      this.setState(prevState => {\r\n        if (prevState.scrollOffset === scrollOffset) {\r\n          return null;\r\n        }\r\n        return {\r\n          scrollDirection:\r\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\r\n          scrollOffset: scrollOffset,\r\n          scrollUpdateWasRequested: true,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    }\r\n\r\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\r\n      const { itemCount, layout } = this.props;\r\n      const { scrollOffset } = this.state;\r\n\r\n      index = Math.max(0, Math.min(index, itemCount - 1));\r\n\r\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\r\n      // But we only need to account for its size when it's actually visible.\r\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\r\n      let scrollbarSize = 0;\r\n      if (this._outerRef) {\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n        if (layout === 'vertical') {\r\n          scrollbarSize =\r\n            outerRef.scrollWidth > outerRef.clientWidth\r\n              ? getScrollbarSize()\r\n              : 0;\r\n        } else {\r\n          scrollbarSize =\r\n            outerRef.scrollHeight > outerRef.clientHeight\r\n              ? getScrollbarSize()\r\n              : 0;\r\n        }\r\n      }\r\n\r\n      this.scrollTo(\r\n        getOffsetForIndexAndAlignment(\r\n          this.props,\r\n          index,\r\n          align,\r\n          scrollOffset,\r\n          this._instanceProps,\r\n          scrollbarSize\r\n        )\r\n      );\r\n    }\r\n\r\n    componentDidMount() {\r\n      const { direction, initialScrollOffset, layout } = this.props;\r\n\r\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n        // TODO Deprecate direction \"horizontal\"\r\n        if (direction === 'horizontal' || layout === 'horizontal') {\r\n          outerRef.scrollLeft = initialScrollOffset;\r\n        } else {\r\n          outerRef.scrollTop = initialScrollOffset;\r\n        }\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const { direction, layout } = this.props;\r\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\r\n\r\n      if (scrollUpdateWasRequested && this._outerRef != null) {\r\n        const outerRef = ((this._outerRef: any): HTMLElement);\r\n\r\n        // TODO Deprecate direction \"horizontal\"\r\n        if (direction === 'horizontal' || layout === 'horizontal') {\r\n          if (direction === 'rtl') {\r\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\r\n            switch (getRTLOffsetType()) {\r\n              case 'negative':\r\n                outerRef.scrollLeft = -scrollOffset;\r\n                break;\r\n              case 'positive-ascending':\r\n                outerRef.scrollLeft = scrollOffset;\r\n                break;\r\n              default:\r\n                const { clientWidth, scrollWidth } = outerRef;\r\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\r\n                break;\r\n            }\r\n          } else {\r\n            outerRef.scrollLeft = scrollOffset;\r\n          }\r\n        } else {\r\n          outerRef.scrollTop = scrollOffset;\r\n        }\r\n      }\r\n\r\n      this._callPropsCallbacks();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        children,\r\n        className,\r\n        direction,\r\n        height,\r\n        innerRef,\r\n        innerElementType,\r\n        innerTagName,\r\n        itemCount,\r\n        itemData,\r\n        itemKey = defaultItemKey,\r\n        layout,\r\n        outerElementType,\r\n        outerTagName,\r\n        style,\r\n        useIsScrolling,\r\n        width,\r\n      } = this.props;\r\n      const { isScrolling } = this.state;\r\n\r\n      // TODO Deprecate direction \"horizontal\"\r\n      const isHorizontal =\r\n        direction === 'horizontal' || layout === 'horizontal';\r\n\r\n      const onScroll = isHorizontal\r\n        ? this._onScrollHorizontal\r\n        : this._onScrollVertical;\r\n\r\n      const [startIndex, stopIndex] = this._getRangeToRender();\r\n\r\n      const items = [];\r\n      if (itemCount > 0) {\r\n        for (let index = startIndex; index <= stopIndex; index++) {\r\n          items.push(\r\n            createElement(children, {\r\n              data: itemData,\r\n              key: itemKey(index, itemData),\r\n              index,\r\n              isScrolling: useIsScrolling ? isScrolling : undefined,\r\n              style: this._getItemStyle(index),\r\n            })\r\n          );\r\n        }\r\n      }\r\n\r\n      // Read this value AFTER items have been created,\r\n      // So their actual sizes (if variable) are taken into consideration.\r\n      const estimatedTotalSize = getEstimatedTotalSize(\r\n        this.props,\r\n        this._instanceProps\r\n      );\r\n\r\n      return createElement(\r\n        outerElementType || outerTagName || 'div',\r\n        {\r\n          className,\r\n          onScroll,\r\n          ref: this._outerRefSetter,\r\n          style: {\r\n            position: 'relative',\r\n            height,\r\n            width,\r\n            overflow: 'auto',\r\n            WebkitOverflowScrolling: 'touch',\r\n            willChange: 'transform',\r\n            direction,\r\n            ...style,\r\n          },\r\n        },\r\n        createElement(innerElementType || innerTagName || 'div', {\r\n          children: items,\r\n          ref: innerRef,\r\n          style: {\r\n            height: isHorizontal ? '100%' : estimatedTotalSize,\r\n            pointerEvents: isScrolling ? 'none' : undefined,\r\n            width: isHorizontal ? estimatedTotalSize : '100%',\r\n          },\r\n        })\r\n      );\r\n    }\r\n\r\n    _callOnItemsRendered: (\r\n      overscanStartIndex: number,\r\n      overscanStopIndex: number,\r\n      visibleStartIndex: number,\r\n      visibleStopIndex: number\r\n    ) => void;\r\n    _callOnItemsRendered = memoizeOne(\r\n      (\r\n        overscanStartIndex: number,\r\n        overscanStopIndex: number,\r\n        visibleStartIndex: number,\r\n        visibleStopIndex: number\r\n      ) =>\r\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\r\n          overscanStartIndex,\r\n          overscanStopIndex,\r\n          visibleStartIndex,\r\n          visibleStopIndex,\r\n        })\r\n    );\r\n\r\n    _callOnScroll: (\r\n      scrollDirection: ScrollDirection,\r\n      scrollOffset: number,\r\n      scrollUpdateWasRequested: boolean\r\n    ) => void;\r\n    _callOnScroll = memoizeOne(\r\n      (\r\n        scrollDirection: ScrollDirection,\r\n        scrollOffset: number,\r\n        scrollUpdateWasRequested: boolean\r\n      ) =>\r\n        ((this.props.onScroll: any): onScrollCallback)({\r\n          scrollDirection,\r\n          scrollOffset,\r\n          scrollUpdateWasRequested,\r\n        })\r\n    );\r\n\r\n    _callPropsCallbacks() {\r\n      if (typeof this.props.onItemsRendered === 'function') {\r\n        const { itemCount } = this.props;\r\n        if (itemCount > 0) {\r\n          const [\r\n            overscanStartIndex,\r\n            overscanStopIndex,\r\n            visibleStartIndex,\r\n            visibleStopIndex,\r\n          ] = this._getRangeToRender();\r\n          this._callOnItemsRendered(\r\n            overscanStartIndex,\r\n            overscanStopIndex,\r\n            visibleStartIndex,\r\n            visibleStopIndex\r\n          );\r\n        }\r\n      }\r\n\r\n      if (typeof this.props.onScroll === 'function') {\r\n        const {\r\n          scrollDirection,\r\n          scrollOffset,\r\n          scrollUpdateWasRequested,\r\n        } = this.state;\r\n        this._callOnScroll(\r\n          scrollDirection,\r\n          scrollOffset,\r\n          scrollUpdateWasRequested\r\n        );\r\n      }\r\n    }\r\n\r\n    // Lazily create and cache item styles while scrolling,\r\n    // So that pure component sCU will prevent re-renders.\r\n    // We maintain this cache, and pass a style prop rather than index,\r\n    // So that List can clear cached styles and force item re-render if necessary.\r\n    _getItemStyle: (index: number) => Object;\r\n    _getItemStyle = (index: number): Object => {\r\n      const { direction, itemSize, layout } = this.props;\r\n\r\n      const itemStyleCache = this._getItemStyleCache(\r\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\r\n        shouldResetStyleCacheOnItemSizeChange && layout,\r\n        shouldResetStyleCacheOnItemSizeChange && direction\r\n      );\r\n\r\n      let style;\r\n      if (itemStyleCache.hasOwnProperty(index)) {\r\n        style = itemStyleCache[index];\r\n      } else {\r\n        const offset = getItemOffset(this.props, index, this._instanceProps);\r\n        const size = getItemSize(this.props, index, this._instanceProps);\r\n\r\n        // TODO Deprecate direction \"horizontal\"\r\n        const isHorizontal =\r\n          direction === 'horizontal' || layout === 'horizontal';\r\n\r\n        const isRtl = direction === 'rtl';\r\n        const offsetHorizontal = isHorizontal ? offset : 0;\r\n        itemStyleCache[index] = style = {\r\n          position: 'absolute',\r\n          left: isRtl ? undefined : offsetHorizontal,\r\n          right: isRtl ? offsetHorizontal : undefined,\r\n          top: !isHorizontal ? offset : 0,\r\n          height: !isHorizontal ? size : '100%',\r\n          width: isHorizontal ? size : '100%',\r\n        };\r\n      }\r\n\r\n      return style;\r\n    };\r\n\r\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\r\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\r\n\r\n    _getRangeToRender(): [number, number, number, number] {\r\n      const { itemCount, overscanCount } = this.props;\r\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\r\n\r\n      if (itemCount === 0) {\r\n        return [0, 0, 0, 0];\r\n      }\r\n\r\n      const startIndex = getStartIndexForOffset(\r\n        this.props,\r\n        scrollOffset,\r\n        this._instanceProps\r\n      );\r\n      const stopIndex = getStopIndexForStartIndex(\r\n        this.props,\r\n        startIndex,\r\n        scrollOffset,\r\n        this._instanceProps\r\n      );\r\n\r\n      // Overscan by one item in each direction so that tab/focus works.\r\n      // If there isn't at least one extra item, tab loops back around.\r\n      const overscanBackward =\r\n        !isScrolling || scrollDirection === 'backward'\r\n          ? Math.max(1, overscanCount)\r\n          : 1;\r\n      const overscanForward =\r\n        !isScrolling || scrollDirection === 'forward'\r\n          ? Math.max(1, overscanCount)\r\n          : 1;\r\n\r\n      return [\r\n        Math.max(0, startIndex - overscanBackward),\r\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\r\n        startIndex,\r\n        stopIndex,\r\n      ];\r\n    }\r\n\r\n    _onScrollHorizontal = (event: ScrollEvent): void => {\r\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\r\n      this.setState(prevState => {\r\n        if (prevState.scrollOffset === Math.round(scrollLeft)) {\r\n          // Scroll position may have been updated by cDM/cDU,\r\n          // In which case we don't need to trigger another render,\r\n          // And we don't want to update state.isScrolling.\r\n          return null;\r\n        }\r\n\r\n        const { direction } = this.props;\r\n\r\n        let scrollOffset = scrollLeft;\r\n        if (direction === 'rtl') {\r\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\r\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\r\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\r\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\r\n          switch (getRTLOffsetType()) {\r\n            case 'negative':\r\n              scrollOffset = -scrollLeft;\r\n              break;\r\n            case 'positive-descending':\r\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\r\n              break;\r\n          }\r\n        }\r\n\r\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\r\n        scrollOffset = Math.max(\r\n          0,\r\n          Math.min(scrollOffset, scrollWidth - clientWidth)\r\n        );\r\n\r\n        return {\r\n          isScrolling: true,\r\n          scrollDirection:\r\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\r\n          scrollOffset,\r\n          scrollUpdateWasRequested: false,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    };\r\n\r\n    _onScrollVertical = (event: ScrollEvent): void => {\r\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\r\n      this.setState(prevState => {\r\n        if (prevState.scrollOffset === Math.round(scrollTop)) {\r\n          // Scroll position may have been updated by cDM/cDU,\r\n          // In which case we don't need to trigger another render,\r\n          // And we don't want to update state.isScrolling.\r\n          return null;\r\n        }\r\n\r\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\r\n        const scrollOffset = Math.max(\r\n          0,\r\n          Math.min(scrollTop, scrollHeight - clientHeight)\r\n        );\r\n\r\n        return {\r\n          isScrolling: true,\r\n          scrollDirection:\r\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\r\n          scrollOffset,\r\n          scrollUpdateWasRequested: false,\r\n        };\r\n      }, this._resetIsScrollingDebounced);\r\n    };\r\n\r\n    _outerRefSetter = (ref: any): void => {\r\n      const { outerRef } = this.props;\r\n\r\n      this._outerRef = ((ref: any): HTMLDivElement);\r\n\r\n      if (typeof outerRef === 'function') {\r\n        outerRef(ref);\r\n      } else if (\r\n        outerRef != null &&\r\n        typeof outerRef === 'object' &&\r\n        outerRef.hasOwnProperty('current')\r\n      ) {\r\n        outerRef.current = ref;\r\n      }\r\n    };\r\n\r\n    _resetIsScrollingDebounced = () => {\r\n      if (this._resetIsScrollingTimeoutId !== null) {\r\n        cancelTimeout(this._resetIsScrollingTimeoutId);\r\n      }\r\n\r\n      this._resetIsScrollingTimeoutId = requestTimeout(\r\n        this._resetIsScrolling,\r\n        IS_SCROLLING_DEBOUNCE_INTERVAL\r\n      );\r\n    };\r\n\r\n    _resetIsScrolling = () => {\r\n      this._resetIsScrollingTimeoutId = null;\r\n\r\n      this.setState({ isScrolling: false }, () => {\r\n        // Clear style cache after state update has been committed.\r\n        // This way we don't break pure sCU for items that don't use isScrolling param.\r\n        this._getItemStyleCache(-1, null);\r\n      });\r\n    };\r\n  };\r\n}\r\n\r\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\r\n// This would avoid ever calling the render function for the same index more than once,\r\n// But it would also add the overhead of a lot of components/fibers.\r\n// I assume people already do this (render function returning a class component),\r\n// So my doing it would just unnecessarily double the wrappers.\r\n\r\nconst validateSharedProps = (\r\n  {\r\n    children,\r\n    direction,\r\n    height,\r\n    layout,\r\n    innerTagName,\r\n    outerTagName,\r\n    width,\r\n  }: Props<any>,\r\n  { instance }: State\r\n): void => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (innerTagName != null || outerTagName != null) {\r\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\r\n        devWarningsTagName.add(instance);\r\n        console.warn(\r\n          'The innerTagName and outerTagName props have been deprecated. ' +\r\n            'Please use the innerElementType and outerElementType props instead.'\r\n        );\r\n      }\r\n    }\r\n\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n\r\n    switch (direction) {\r\n      case 'horizontal':\r\n      case 'vertical':\r\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\r\n          devWarningsDirection.add(instance);\r\n          console.warn(\r\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\r\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\r\n          );\r\n        }\r\n        break;\r\n      case 'ltr':\r\n      case 'rtl':\r\n        // Valid values\r\n        break;\r\n      default:\r\n        throw Error(\r\n          'An invalid \"direction\" prop has been specified. ' +\r\n            'Value should be either \"ltr\" or \"rtl\". ' +\r\n            `\"${direction}\" was specified.`\r\n        );\r\n    }\r\n\r\n    switch (layout) {\r\n      case 'horizontal':\r\n      case 'vertical':\r\n        // Valid values\r\n        break;\r\n      default:\r\n        throw Error(\r\n          'An invalid \"layout\" prop has been specified. ' +\r\n            'Value should be either \"horizontal\" or \"vertical\". ' +\r\n            `\"${layout}\" was specified.`\r\n        );\r\n    }\r\n\r\n    if (children == null) {\r\n      throw Error(\r\n        'An invalid \"children\" prop has been specified. ' +\r\n          'Value should be a React component. ' +\r\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\r\n      );\r\n    }\r\n\r\n    if (isHorizontal && typeof width !== 'number') {\r\n      throw Error(\r\n        'An invalid \"width\" prop has been specified. ' +\r\n          'Horizontal lists must specify a number for width. ' +\r\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\r\n      );\r\n    } else if (!isHorizontal && typeof height !== 'number') {\r\n      throw Error(\r\n        'An invalid \"height\" prop has been specified. ' +\r\n          'Vertical lists must specify a number for height. ' +\r\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\r\n      );\r\n    }\r\n  }\r\n};\r\n","// @flow\r\n\r\nimport createListComponent from './createListComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createListComponent';\r\n\r\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\r\n\r\ntype VariableSizeProps = {|\r\n  estimatedItemSize: number,\r\n  ...Props<any>,\r\n|};\r\n\r\ntype itemSizeGetter = (index: number) => number;\r\n\r\ntype ItemMetadata = {|\r\n  offset: number,\r\n  size: number,\r\n|};\r\ntype InstanceProps = {|\r\n  itemMetadataMap: { [index: number]: ItemMetadata },\r\n  estimatedItemSize: number,\r\n  lastMeasuredIndex: number,\r\n|};\r\n\r\nconst getItemMetadata = (\r\n  props: Props<any>,\r\n  index: number,\r\n  instanceProps: InstanceProps\r\n): ItemMetadata => {\r\n  const { itemSize } = ((props: any): VariableSizeProps);\r\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\r\n\r\n  if (index > lastMeasuredIndex) {\r\n    let offset = 0;\r\n    if (lastMeasuredIndex >= 0) {\r\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\r\n      offset = itemMetadata.offset + itemMetadata.size;\r\n    }\r\n\r\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\r\n      let size = ((itemSize: any): itemSizeGetter)(i);\r\n\r\n      itemMetadataMap[i] = {\r\n        offset,\r\n        size,\r\n      };\r\n\r\n      offset += size;\r\n    }\r\n\r\n    instanceProps.lastMeasuredIndex = index;\r\n  }\r\n\r\n  return itemMetadataMap[index];\r\n};\r\n\r\nconst findNearestItem = (\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  offset: number\r\n) => {\r\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\r\n\r\n  const lastMeasuredItemOffset =\r\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\r\n\r\n  if (lastMeasuredItemOffset >= offset) {\r\n    // If we've already measured items within this range just use a binary search as it's faster.\r\n    return findNearestItemBinarySearch(\r\n      props,\r\n      instanceProps,\r\n      lastMeasuredIndex,\r\n      0,\r\n      offset\r\n    );\r\n  } else {\r\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\r\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\r\n    // The overall complexity for this approach is O(log n).\r\n    return findNearestItemExponentialSearch(\r\n      props,\r\n      instanceProps,\r\n      Math.max(0, lastMeasuredIndex),\r\n      offset\r\n    );\r\n  }\r\n};\r\n\r\nconst findNearestItemBinarySearch = (\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  high: number,\r\n  low: number,\r\n  offset: number\r\n): number => {\r\n  while (low <= high) {\r\n    const middle = low + Math.floor((high - low) / 2);\r\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\r\n\r\n    if (currentOffset === offset) {\r\n      return middle;\r\n    } else if (currentOffset < offset) {\r\n      low = middle + 1;\r\n    } else if (currentOffset > offset) {\r\n      high = middle - 1;\r\n    }\r\n  }\r\n\r\n  if (low > 0) {\r\n    return low - 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst findNearestItemExponentialSearch = (\r\n  props: Props<any>,\r\n  instanceProps: InstanceProps,\r\n  index: number,\r\n  offset: number\r\n): number => {\r\n  const { itemCount } = props;\r\n  let interval = 1;\r\n\r\n  while (\r\n    index < itemCount &&\r\n    getItemMetadata(props, index, instanceProps).offset < offset\r\n  ) {\r\n    index += interval;\r\n    interval *= 2;\r\n  }\r\n\r\n  return findNearestItemBinarySearch(\r\n    props,\r\n    instanceProps,\r\n    Math.min(index, itemCount - 1),\r\n    Math.floor(index / 2),\r\n    offset\r\n  );\r\n};\r\n\r\nconst getEstimatedTotalSize = (\r\n  { itemCount }: Props<any>,\r\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\r\n) => {\r\n  let totalSizeOfMeasuredItems = 0;\r\n\r\n  // Edge case check for when the number of items decreases while a scroll is in progress.\r\n  // https://github.com/bvaughn/react-window/pull/138\r\n  if (lastMeasuredIndex >= itemCount) {\r\n    lastMeasuredIndex = itemCount - 1;\r\n  }\r\n\r\n  if (lastMeasuredIndex >= 0) {\r\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\r\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\r\n  }\r\n\r\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\r\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\r\n\r\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\r\n};\r\n\r\nconst VariableSizeList = createListComponent({\r\n  getItemOffset: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => getItemMetadata(props, index, instanceProps).offset,\r\n\r\n  getItemSize: (\r\n    props: Props<any>,\r\n    index: number,\r\n    instanceProps: InstanceProps\r\n  ): number => instanceProps.itemMetadataMap[index].size,\r\n\r\n  getEstimatedTotalSize,\r\n\r\n  getOffsetForIndexAndAlignment: (\r\n    props: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps,\r\n    scrollbarSize: number\r\n  ): number => {\r\n    const { direction, height, layout, width } = props;\r\n\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\r\n\r\n    // Get estimated total size after ItemMetadata is computed,\r\n    // To ensure it reflects actual measurements instead of just estimates.\r\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\r\n\r\n    const maxOffset = Math.max(\r\n      0,\r\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      itemMetadata.offset - size + itemMetadata.size + scrollbarSize\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (\r\n        scrollOffset >= minOffset - size &&\r\n        scrollOffset <= maxOffset + size\r\n      ) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center':\r\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\r\n      case 'auto':\r\n      default:\r\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\r\n          return scrollOffset;\r\n        } else if (scrollOffset < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getStartIndexForOffset: (\r\n    props: Props<any>,\r\n    offset: number,\r\n    instanceProps: InstanceProps\r\n  ): number => findNearestItem(props, instanceProps, offset),\r\n\r\n  getStopIndexForStartIndex: (\r\n    props: Props<any>,\r\n    startIndex: number,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps\r\n  ): number => {\r\n    const { direction, height, itemCount, layout, width } = props;\r\n\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\r\n    const maxOffset = scrollOffset + size;\r\n\r\n    let offset = itemMetadata.offset + itemMetadata.size;\r\n    let stopIndex = startIndex;\r\n\r\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\r\n      stopIndex++;\r\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\r\n    }\r\n\r\n    return stopIndex;\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\r\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\r\n\r\n    const instanceProps = {\r\n      itemMetadataMap: {},\r\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\r\n      lastMeasuredIndex: -1,\r\n    };\r\n\r\n    instance.resetAfterIndex = (\r\n      index: number,\r\n      shouldForceUpdate?: boolean = true\r\n    ) => {\r\n      instanceProps.lastMeasuredIndex = Math.min(\r\n        instanceProps.lastMeasuredIndex,\r\n        index - 1\r\n      );\r\n\r\n      // We could potentially optimize further by only evicting styles after this index,\r\n      // But since styles are only cached while scrolling is in progress-\r\n      // It seems an unnecessary optimization.\r\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\r\n      instance._getItemStyleCache(-1);\r\n\r\n      if (shouldForceUpdate) {\r\n        instance.forceUpdate();\r\n      }\r\n    };\r\n\r\n    return instanceProps;\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: false,\r\n\r\n  validateProps: ({ itemSize }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof itemSize !== 'function') {\r\n        throw Error(\r\n          'An invalid \"itemSize\" prop has been specified. ' +\r\n            'Value should be a function. ' +\r\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default VariableSizeList;\r\n","// @flow\r\n\r\nimport createGridComponent from './createGridComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createGridComponent';\r\n\r\nconst FixedSizeGrid = createGridComponent({\r\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\r\n    index * ((columnWidth: any): number),\r\n\r\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\r\n    ((columnWidth: any): number),\r\n\r\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\r\n    index * ((rowHeight: any): number),\r\n\r\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\r\n    ((rowHeight: any): number),\r\n\r\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\r\n    ((rowHeight: any): number) * rowCount,\r\n\r\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\r\n    ((columnWidth: any): number) * columnCount,\r\n\r\n  getOffsetForColumnAndAlignment: (\r\n    { columnCount, columnWidth, width }: Props<any>,\r\n    columnIndex: number,\r\n    align: ScrollToAlign,\r\n    scrollLeft: number,\r\n    instanceProps: typeof undefined,\r\n    scrollbarSize: number\r\n  ): number => {\r\n    const lastColumnOffset = Math.max(\r\n      0,\r\n      columnCount * ((columnWidth: any): number) - width\r\n    );\r\n    const maxOffset = Math.min(\r\n      lastColumnOffset,\r\n      columnIndex * ((columnWidth: any): number)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      columnIndex * ((columnWidth: any): number) -\r\n        width +\r\n        scrollbarSize +\r\n        ((columnWidth: any): number)\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center':\r\n        // \"Centered\" offset is usually the average of the min and max.\r\n        // But near the edges of the list, this doesn't hold true.\r\n        const middleOffset = Math.round(\r\n          minOffset + (maxOffset - minOffset) / 2\r\n        );\r\n        if (middleOffset < Math.ceil(width / 2)) {\r\n          return 0; // near the beginning\r\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\r\n          return lastColumnOffset; // near the end\r\n        } else {\r\n          return middleOffset;\r\n        }\r\n      case 'auto':\r\n      default:\r\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\r\n          return scrollLeft;\r\n        } else if (minOffset > maxOffset) {\r\n          // Because we only take into account the scrollbar size when calculating minOffset\r\n          // this value can be larger than maxOffset when at the end of the list\r\n          return minOffset;\r\n        } else if (scrollLeft < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getOffsetForRowAndAlignment: (\r\n    { rowHeight, height, rowCount }: Props<any>,\r\n    rowIndex: number,\r\n    align: ScrollToAlign,\r\n    scrollTop: number,\r\n    instanceProps: typeof undefined,\r\n    scrollbarSize: number\r\n  ): number => {\r\n    const lastRowOffset = Math.max(\r\n      0,\r\n      rowCount * ((rowHeight: any): number) - height\r\n    );\r\n    const maxOffset = Math.min(\r\n      lastRowOffset,\r\n      rowIndex * ((rowHeight: any): number)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      rowIndex * ((rowHeight: any): number) -\r\n        height +\r\n        scrollbarSize +\r\n        ((rowHeight: any): number)\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center':\r\n        // \"Centered\" offset is usually the average of the min and max.\r\n        // But near the edges of the list, this doesn't hold true.\r\n        const middleOffset = Math.round(\r\n          minOffset + (maxOffset - minOffset) / 2\r\n        );\r\n        if (middleOffset < Math.ceil(height / 2)) {\r\n          return 0; // near the beginning\r\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\r\n          return lastRowOffset; // near the end\r\n        } else {\r\n          return middleOffset;\r\n        }\r\n      case 'auto':\r\n      default:\r\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\r\n          return scrollTop;\r\n        } else if (minOffset > maxOffset) {\r\n          // Because we only take into account the scrollbar size when calculating minOffset\r\n          // this value can be larger than maxOffset when at the end of the list\r\n          return minOffset;\r\n        } else if (scrollTop < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getColumnStartIndexForOffset: (\r\n    { columnWidth, columnCount }: Props<any>,\r\n    scrollLeft: number\r\n  ): number =>\r\n    Math.max(\r\n      0,\r\n      Math.min(\r\n        columnCount - 1,\r\n        Math.floor(scrollLeft / ((columnWidth: any): number))\r\n      )\r\n    ),\r\n\r\n  getColumnStopIndexForStartIndex: (\r\n    { columnWidth, columnCount, width }: Props<any>,\r\n    startIndex: number,\r\n    scrollLeft: number\r\n  ): number => {\r\n    const left = startIndex * ((columnWidth: any): number);\r\n    const numVisibleColumns = Math.ceil(\r\n      (width + scrollLeft - left) / ((columnWidth: any): number)\r\n    );\r\n    return Math.max(\r\n      0,\r\n      Math.min(\r\n        columnCount - 1,\r\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\r\n      )\r\n    );\r\n  },\r\n\r\n  getRowStartIndexForOffset: (\r\n    { rowHeight, rowCount }: Props<any>,\r\n    scrollTop: number\r\n  ): number =>\r\n    Math.max(\r\n      0,\r\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\r\n    ),\r\n\r\n  getRowStopIndexForStartIndex: (\r\n    { rowHeight, rowCount, height }: Props<any>,\r\n    startIndex: number,\r\n    scrollTop: number\r\n  ): number => {\r\n    const top = startIndex * ((rowHeight: any): number);\r\n    const numVisibleRows = Math.ceil(\r\n      (height + scrollTop - top) / ((rowHeight: any): number)\r\n    );\r\n    return Math.max(\r\n      0,\r\n      Math.min(\r\n        rowCount - 1,\r\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\r\n      )\r\n    );\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>): any {\r\n    // Noop\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: true,\r\n\r\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof columnWidth !== 'number') {\r\n        throw Error(\r\n          'An invalid \"columnWidth\" prop has been specified. ' +\r\n            'Value should be a number. ' +\r\n            `\"${\r\n              columnWidth === null ? 'null' : typeof columnWidth\r\n            }\" was specified.`\r\n        );\r\n      }\r\n\r\n      if (typeof rowHeight !== 'number') {\r\n        throw Error(\r\n          'An invalid \"rowHeight\" prop has been specified. ' +\r\n            'Value should be a number. ' +\r\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default FixedSizeGrid;\r\n","// @flow\r\n\r\nimport createListComponent from './createListComponent';\r\n\r\nimport type { Props, ScrollToAlign } from './createListComponent';\r\n\r\ntype InstanceProps = any;\r\n\r\nconst FixedSizeList = createListComponent({\r\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\r\n    index * ((itemSize: any): number),\r\n\r\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\r\n    ((itemSize: any): number),\r\n\r\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\r\n    ((itemSize: any): number) * itemCount,\r\n\r\n  getOffsetForIndexAndAlignment: (\r\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\r\n    index: number,\r\n    align: ScrollToAlign,\r\n    scrollOffset: number,\r\n    instanceProps: InstanceProps,\r\n    scrollbarSize: number\r\n  ): number => {\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const lastItemOffset = Math.max(\r\n      0,\r\n      itemCount * ((itemSize: any): number) - size\r\n    );\r\n    const maxOffset = Math.min(\r\n      lastItemOffset,\r\n      index * ((itemSize: any): number)\r\n    );\r\n    const minOffset = Math.max(\r\n      0,\r\n      index * ((itemSize: any): number) -\r\n        size +\r\n        ((itemSize: any): number) +\r\n        scrollbarSize\r\n    );\r\n\r\n    if (align === 'smart') {\r\n      if (\r\n        scrollOffset >= minOffset - size &&\r\n        scrollOffset <= maxOffset + size\r\n      ) {\r\n        align = 'auto';\r\n      } else {\r\n        align = 'center';\r\n      }\r\n    }\r\n\r\n    switch (align) {\r\n      case 'start':\r\n        return maxOffset;\r\n      case 'end':\r\n        return minOffset;\r\n      case 'center': {\r\n        // \"Centered\" offset is usually the average of the min and max.\r\n        // But near the edges of the list, this doesn't hold true.\r\n        const middleOffset = Math.round(\r\n          minOffset + (maxOffset - minOffset) / 2\r\n        );\r\n        if (middleOffset < Math.ceil(size / 2)) {\r\n          return 0; // near the beginning\r\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\r\n          return lastItemOffset; // near the end\r\n        } else {\r\n          return middleOffset;\r\n        }\r\n      }\r\n      case 'auto':\r\n      default:\r\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\r\n          return scrollOffset;\r\n        } else if (scrollOffset < minOffset) {\r\n          return minOffset;\r\n        } else {\r\n          return maxOffset;\r\n        }\r\n    }\r\n  },\r\n\r\n  getStartIndexForOffset: (\r\n    { itemCount, itemSize }: Props<any>,\r\n    offset: number\r\n  ): number =>\r\n    Math.max(\r\n      0,\r\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\r\n    ),\r\n\r\n  getStopIndexForStartIndex: (\r\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\r\n    startIndex: number,\r\n    scrollOffset: number\r\n  ): number => {\r\n    // TODO Deprecate direction \"horizontal\"\r\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\r\n    const offset = startIndex * ((itemSize: any): number);\r\n    const size = (((isHorizontal ? width : height): any): number);\r\n    const numVisibleItems = Math.ceil(\r\n      (size + scrollOffset - offset) / ((itemSize: any): number)\r\n    );\r\n    return Math.max(\r\n      0,\r\n      Math.min(\r\n        itemCount - 1,\r\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\r\n      )\r\n    );\r\n  },\r\n\r\n  initInstanceProps(props: Props<any>): any {\r\n    // Noop\r\n  },\r\n\r\n  shouldResetStyleCacheOnItemSizeChange: true,\r\n\r\n  validateProps: ({ itemSize }: Props<any>): void => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof itemSize !== 'number') {\r\n        throw Error(\r\n          'An invalid \"itemSize\" prop has been specified. ' +\r\n            'Value should be a number. ' +\r\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\r\n        );\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport default FixedSizeList;\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\r\n\r\n// Pulled from react-compat\r\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\r\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\r\n  for (let attribute in prev) {\r\n    if (!(attribute in next)) {\r\n      return true;\r\n    }\r\n  }\r\n  for (let attribute in next) {\r\n    if (prev[attribute] !== next[attribute]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","// @flow\r\n\r\nimport shallowDiffers from './shallowDiffers';\r\n\r\n// Custom comparison function for React.memo().\r\n// It knows to compare individual style props and ignore the wrapper object.\r\n// See https://reactjs.org/docs/react-api.html#reactmemo\r\nexport default function areEqual(\r\n  prevProps: Object,\r\n  nextProps: Object\r\n): boolean {\r\n  const { style: prevStyle, ...prevRest } = prevProps;\r\n  const { style: nextStyle, ...nextRest } = nextProps;\r\n\r\n  return (\r\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\r\n  );\r\n}\r\n","// @flow\r\n\r\nimport areEqual from './areEqual';\r\nimport shallowDiffers from './shallowDiffers';\r\n\r\n// Custom shouldComponentUpdate for class components.\r\n// It knows to compare individual style props and ignore the wrapper object.\r\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\r\nexport default function shouldComponentUpdate(\r\n  nextProps: Object,\r\n  nextState: Object\r\n): boolean {\r\n  return (\r\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\r\n  );\r\n}\r\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","safeIsNaN","Number","isNaN","value","areInputsEqual","newInputs","lastInputs","first","second","memoizeOne","resultFn","isEqual","lastThis","lastResult","lastArgs","calledOnce","newArgs","_i","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","defaultItemKey","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_this","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","scrollToItem","align","columnCount","rowCount","scrollbarSize","estimatedTotalHeight","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","estimatedTotalWidth","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","defaultProps","window","WeakSet","has","add","console","warn","Error","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","findNearestItem","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","devWarningsDirection","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","nextState"],"mappings":"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"}